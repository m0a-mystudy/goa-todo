// Code generated by goagen v1.2.0, DO NOT EDIT.
//
// API "Todo API": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/m0a-mystudy/goa-todo/design
// --out=$(GOPATH)/src/github.com/m0a-mystudy/goa-todo
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
	"time"
	"unicode/utf8"
)

// CreateTodoContext provides the todo create action context.
type CreateTodoContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateTodoPayload
}

// NewCreateTodoContext parses the incoming request URL and body, performs validations and creates the
// context used by the todo controller create action.
func NewCreateTodoContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateTodoContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateTodoContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createTodoPayload is the todo create action payload.
type createTodoPayload struct {
	Completed *bool `form:"completed,omitempty" json:"completed,omitempty" xml:"completed,omitempty"`
	// Date of creation
	Created *time.Time `form:"created,omitempty" json:"created,omitempty" xml:"created,omitempty"`
	// ID of Todo
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Date of last update
	Modified *time.Time `form:"modified,omitempty" json:"modified,omitempty" xml:"modified,omitempty"`
	Title    *string    `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
}

// Finalize sets the default values defined in the design.
func (payload *createTodoPayload) Finalize() {
	var defaultCompleted = false
	if payload.Completed == nil {
		payload.Completed = &defaultCompleted
	}
	var defaultCreated, _ = time.Parse(time.RFC3339, "1978-06-30T10:00:00+09:00")
	if payload.Created == nil {
		payload.Created = &defaultCreated
	}
	var defaultModified, _ = time.Parse(time.RFC3339, "1978-06-30T10:00:00+09:00")
	if payload.Modified == nil {
		payload.Modified = &defaultModified
	}
}

// Validate runs the validation rules defined in the design.
func (payload *createTodoPayload) Validate() (err error) {
	if payload.Title == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "title"))
	}
	if payload.Completed == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "completed"))
	}
	if payload.Created == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "created"))
	}
	if payload.Modified == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "modified"))
	}
	if payload.Title != nil {
		if utf8.RuneCountInString(*payload.Title) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.title`, *payload.Title, utf8.RuneCountInString(*payload.Title), 8, true))
		}
	}
	return
}

// Publicize creates CreateTodoPayload from createTodoPayload
func (payload *createTodoPayload) Publicize() *CreateTodoPayload {
	var pub CreateTodoPayload
	if payload.Completed != nil {
		pub.Completed = *payload.Completed
	}
	if payload.Created != nil {
		pub.Created = *payload.Created
	}
	if payload.ID != nil {
		pub.ID = payload.ID
	}
	if payload.Modified != nil {
		pub.Modified = *payload.Modified
	}
	if payload.Title != nil {
		pub.Title = *payload.Title
	}
	return &pub
}

// CreateTodoPayload is the todo create action payload.
type CreateTodoPayload struct {
	Completed bool `form:"completed" json:"completed" xml:"completed"`
	// Date of creation
	Created time.Time `form:"created" json:"created" xml:"created"`
	// ID of Todo
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Date of last update
	Modified time.Time `form:"modified" json:"modified" xml:"modified"`
	Title    string    `form:"title" json:"title" xml:"title"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateTodoPayload) Validate() (err error) {
	if payload.Title == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "title"))
	}

	if utf8.RuneCountInString(payload.Title) < 8 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.title`, payload.Title, utf8.RuneCountInString(payload.Title), 8, true))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateTodoContext) Created(r *Todo) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.todo+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateTodoContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListTodoContext provides the todo list action context.
type ListTodoContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListTodoContext parses the incoming request URL and body, performs validations and creates the
// context used by the todo controller list action.
func NewListTodoContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListTodoContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListTodoContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListTodoContext) OK(r TodoCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.todo+json; type=collection")
	if r == nil {
		r = TodoCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListTodoContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowTodoContext provides the todo show action context.
type ShowTodoContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TodoID int
}

// NewShowTodoContext parses the incoming request URL and body, performs validations and creates the
// context used by the todo controller show action.
func NewShowTodoContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowTodoContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowTodoContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTodoID := req.Params["todoID"]
	if len(paramTodoID) > 0 {
		rawTodoID := paramTodoID[0]
		if todoID, err2 := strconv.Atoi(rawTodoID); err2 == nil {
			rctx.TodoID = todoID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("todoID", rawTodoID, "integer"))
		}
		if rctx.TodoID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`todoID`, rctx.TodoID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowTodoContext) OK(r *Todo) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.todo+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowTodoContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowTodoContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateTodoContext provides the todo update action context.
type UpdateTodoContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TodoID  int
	Payload *UpdateTodoPayload
}

// NewUpdateTodoContext parses the incoming request URL and body, performs validations and creates the
// context used by the todo controller update action.
func NewUpdateTodoContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateTodoContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateTodoContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTodoID := req.Params["todoID"]
	if len(paramTodoID) > 0 {
		rawTodoID := paramTodoID[0]
		if todoID, err2 := strconv.Atoi(rawTodoID); err2 == nil {
			rctx.TodoID = todoID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("todoID", rawTodoID, "integer"))
		}
		if rctx.TodoID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`todoID`, rctx.TodoID, 1, true))
		}
	}
	return &rctx, err
}

// updateTodoPayload is the todo update action payload.
type updateTodoPayload struct {
	Completed *bool   `form:"completed,omitempty" json:"completed,omitempty" xml:"completed,omitempty"`
	Title     *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
}

// Publicize creates UpdateTodoPayload from updateTodoPayload
func (payload *updateTodoPayload) Publicize() *UpdateTodoPayload {
	var pub UpdateTodoPayload
	if payload.Completed != nil {
		pub.Completed = payload.Completed
	}
	if payload.Title != nil {
		pub.Title = payload.Title
	}
	return &pub
}

// UpdateTodoPayload is the todo update action payload.
type UpdateTodoPayload struct {
	Completed *bool   `form:"completed,omitempty" json:"completed,omitempty" xml:"completed,omitempty"`
	Title     *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateTodoContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateTodoContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateTodoContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
